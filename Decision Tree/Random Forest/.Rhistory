install.packages("randomForest")
data(iris)
iris.rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
iris.p <- classCenter(iris[,-5], iris[,5], iris.rf$prox)
plot(iris[,3], iris[,4], pch=21, xlab=names(iris)[3], ylab=names(iris)[4],
bg=c("red", "blue", "green")[as.numeric(factor(iris$Species))],
main="Iris Data with Prototypes")
points(iris.p[,3], iris.p[,4], pch=21, cex=2, bg=c("red", "blue", "green"))
summary(iris)
data(iris)
iris.rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
iris.p <- classCenter(iris[,-5], iris[,5], iris.rf$prox)
plot(iris[,3], iris[,4], pch=21, xlab=names(iris)[3], ylab=names(iris)[4],
bg=c("red", "blue", "green")[as.numeric(factor(iris$Species))],
main="Iris Data with Prototypes")
points(iris.p[,3], iris.p[,4], pch=21, cex=2, bg=c("red", "blue", "green"))
data(iris)
rf1 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf2 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf3 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf.all <- combine(rf1, rf2, rf3)
print(rf.all)
library("randomForest", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
data(iris)
rf1 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf2 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf3 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf.all <- combine(rf1, rf2, rf3)
print(rf.all)
data(iris)
rf1 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf2 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf3 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE)
rf.all <- combine(rf1, rf2, rf3)
print(rf.all)
plot(tf.all)
getTree(rf.all,labelVar=TRUE)
getTree(rf.all,labelVar=TRUE)
plot(margin(rf.all))
data(iris)
rf1 <- randomForest(Species ~ ., iris, ntree=50, norm.votes=FALSE
)
plot(margin(rf1))
set.seed(1)
data(iris)
iris.rf <- randomForest(Species ~ ., iris, proximity=TRUE,
keep.forest=FALSE)
MDSplot(iris.rf, iris$Species)
## Using different symbols for the classes:
MDSplot(iris.rf, iris$Species, palette=rep(1, 3), pch=as.numeric(iris$Species))
set.seed(1)
iris.rf <- randomForest(iris[,-5], iris[,5], proximity=TRUE)
plot(outlier(iris.rf), type="h",
col=c("red", "green", "blue")[as.numeric(iris$Species)])
set.seed(4543)
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=FALSE,
importance=TRUE)
varImpPlot(mtcars.rf)
partialPlot
13
Details
The function being plotted is defined as:
~
f
(
x
) =
1
n
n
X
i
=1
f
(
x; x
iC
)
;
where
x
is the variable for which partial dependence is sought, and
x
iC
is the other variables in
the data. The summand is the predicted regression function for regression, and logits (i.e., log of
fraction of votes) for
which.class
for classification:
f
(
x
) = log
p
k
(
x
)
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(ozone.rf, airquality, impvar[i], xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]),
ylim=c(30, 70))
}
par(op)
data(iris)
set.seed(543)
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
data(iris)
## Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
setwd("~/R workspace/Decision Tree/Random Forest")
kddcup.testdata <- read.csv("~/R workspace/Decision Tree/Random Forest/kddcup.testdata.unlabeled_10_percent", header=FALSE)
View(kddcup.testdata)
summary(iris)
summary(kddcup.testdata)
install.packages("C50")
data(churn)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn)
treeModel
summary(treeModel)
ruleModel <- C5.0(churn ~ ., data = churnTrain, rules = TRUE)
ruleModel
summary(ruleModel)
install.packages("partykit")
install.packages("partykit")
install.packages("rpart")
summary(kddcup.testdata)
folderPath<- "/home/ajinkya/Downloads/ids/Intrusion-Detection-System-using-R-master/Proj1/SubmissionNew"
source('~/Downloads/ids/Intrusion-Detection-System-using-R-master/Proj1/SubmissionNew/DataPrep.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a<-c("a","b")
a
source('~/.active-rstudio-document')
summary(iris)
source('~/R workspace/Decision Tree/Random Forest/detec.R')
summary(kddcup.testdata)
source('~/R workspace/Decision Tree/Random Forest/detec.R')
View(kddcup.testdata)
source('~/R workspace/Decision Tree/Random Forest/detec.R')
source('~/R workspace/Decision Tree/Random Forest/detec.R')
summary(kddcup.testdata)
source('~/R workspace/Decision Tree/Random Forest/detec.R')
source('~/.active-rstudio-document')
source('~/R workspace/Decision Tree/Random Forest/detec.R')
getTree(rf1,k=1,labelVar=TRUE)
source('~/R workspace/Decision Tree/Random Forest/detec.R')
print(rf1)
summary(kddcup.testdata)
importance(rf1)
source('~/.active-rstudio-document')
importance(rf1,type=1)
importance(rf1,type=2)
importance(rf1)
source('~/R workspace/Decision Tree/Random Forest/detec.R')
getTree(rf1,k=1,labelVar=TRUE)
getTree(rf1,k=1,labelVar=TRUE) >output.txt
getTree(rf1,k=1,labelVar=TRUE) >output
getTree(rf1,k=1,labelVar=TRUE) >> output
a <- read.csv("~/R workspace/Decision Tree/Random Forest/a", header=FALSE)
View(a)
summary(iris)
source('~/R workspace/Decision Tree/Random Forest/detec.R')
kddcup.testdata$V42
table(observed=kddcup.testdata$V42, predicted = rf1.pred)
rf1.pred <- predict(rf1, a,predict.all = TRUE)
table(observed=kddcup.testdata$V42, predicted = rf1.pred)
rf1.pred <- predict(rf1, a)
table(observed=kddcup.testdata$V42, predicted = rf1.pred
rf1.pred <- predict(rf1, a)
table(observed=kddcup.testdata$V42, predicted = rf1.pred)
rf1.pred <- predict(rf1, a,nodes = TRUR)
table(observed=kddcup.testdata$V42, predicted = rf1.pred)
rf1.pred <- predict(rf1, a,nodes = TRUE)
table(observed=kddcup.testdata$V42, predicted = rf1.pred)
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
iri[ind==2,]
iris[ind==2,]
iris
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.pred <- predict(iris.rf, iris[ind == 2,])
table(observed = iris[ind==2, "Species"], predicted = iris.pred)
rf1.pred <- predict(rf1, a,nodes = TRUE)
table(observed=kddcup.testdata$V42, predicted = rf
rf1.pred <- predict(rf1, a,nodes = TRUE)
table(observed=kddcup.testdata$V42, predicted = rf1.pred)
